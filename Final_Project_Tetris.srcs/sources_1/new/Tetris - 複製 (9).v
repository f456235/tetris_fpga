`timescale 1ns / 1ps

module Tetris(
    clk,
    reset,
    keyboard_state,//鍵盤狀態
    game_state,//遊戲狀態
    random_seed,//亂數種子，初始化next
    end_signal,//告知遊戲結束
    valid,
    h_cnt,
    v_cnt,
    vgaRed,
    vgaGreen,
    vgaBlue,
//    stacking_array_out,//堆疊區域
    hold,//暫存區域
    next//等待區域
    //test
    ,fallingblock_out
    );
    input clk;
    input reset;
    input [3-1:0] keyboard_state;
    input [4-1:0] game_state;
    input [8-1:0] random_seed;
    output reg end_signal;
    input valid;
    input [9:0]h_cnt;
    input [9:0]v_cnt;
    output reg [3:0] vgaRed;
    output reg [3:0] vgaGreen;
    output reg [3:0] vgaBlue;
    reg [4-1:0]stacking_array[16-1:0][32-1:0];
    output reg [4-1:0] hold;
    reg [4-1:0] next_hold;
    output reg [4*6-1:0] next;
    reg [4*6-1:0] next_next;
    
    //test 
    output [3:0] fallingblock_out;
    
    reg [3:0]fallingblock,next_fallingblock;
    reg [3:0]posx,next_posx;
    reg [4:0]posy,next_posy;
    reg [1:0]angle,next_angle;
    reg [26:0]falling_counter,next_falling_counter;
    reg [3-1:0]keyboard_state_delay,next_keyboard_state_delay,keyboard_state_delay2,next_keyboard_state_delay2;
    reg ctbr,next_ctbr;//check_touch_bottom return
    reg calr,next_calr;//check_action_legal_ return
    reg drawing;
    assign fallingblock_out[3:0]={2'b00,angle};
    
    //block
    parameter I=4'b0000;
    parameter J=4'b0001;
    parameter L=4'b0010;
    parameter O=4'b0011;
    parameter S=4'b0100;
    parameter T=4'b0101;
    parameter Z=4'b0110;
    parameter GARBAGE=4'b0111;
    parameter EMPTY=4'b1000;
    //game state
    parameter GET_NEXT_BLOCK=3'd0;
    parameter FALLING_CTBR=3'd1;
    parameter FALLING=3'd2;
    parameter END=3'd3;
    parameter RESTART=3'd4;
    parameter FALLING_CALR=3'd5;
    parameter ELIMINATE=3'd6;
    reg [4:0]ep1,ep2,next_ep1,next_ep2;
    //keyboard state
    parameter NO_ACTION=3'd0;
    parameter MOVE_LEFT=3'd1;
    parameter MOVE_RIGHT=3'd2;
    parameter CLOCKWISE=3'd3;
    parameter COUNTERCLOCKWISE=3'd4;
    parameter SLOW_DOWN=3'd5;
    parameter MOMENTARY_DROP=3'd6;
    parameter HOLD_BLOCK=3'd7;
    reg hold_block_counter,next_hold_block_counter;
    
    
    parameter FALLING_TIME=27'd100_000_000;
    parameter ACTION_TIME_C1=27'd25_000_000;
    parameter ACTION_TIME_D1=27'd25_000_001;
    parameter ACTION_TIME_C2=27'd50_000_000;
    parameter ACTION_TIME_D2=27'd50_000_001;
    parameter ACTION_TIME_C3=27'd75_000_000;
    parameter ACTION_TIME_D3=27'd75_000_001;
    reg [26:0]falling_time,next_falling_time;
    
    //分數
    //reg [10:0]point,next_point;
    
    reg [2:0]state,next_state;
    reg continue;
    wire [2:0] rand_out;
    wire rand_act;
    
    next_block_gen nbg(clk,reset,continue,random_seed,rand_out,rand_act);
    
    integer i,ii,iep;
    always@(*)
    begin
        if(!valid)
            {vgaRed, vgaGreen, vgaBlue} = 12'h0;
        else if(h_cnt<200)
            {vgaRed, vgaGreen, vgaBlue} = 12'h0;
        else if(h_cnt<440)
        begin
            case(stacking_array[(h_cnt-200)/24][(480-v_cnt)/24])
                I:
                {vgaRed, vgaGreen, vgaBlue} = 12'h0ff;
                J:
                {vgaRed, vgaGreen, vgaBlue} = 12'h00e;
                L:
                {vgaRed, vgaGreen, vgaBlue} = 12'hf80;
                O:
                {vgaRed, vgaGreen, vgaBlue} = 12'hff0;
                S:
                {vgaRed, vgaGreen, vgaBlue} = 12'h0e0;
                T:
                {vgaRed, vgaGreen, vgaBlue} = 12'h80f;
                Z:
                {vgaRed, vgaGreen, vgaBlue} = 12'hf00;
                default:
                {vgaRed, vgaGreen, vgaBlue} = 12'hfff;
            endcase
        end
        else
            {vgaRed, vgaGreen, vgaBlue} = 12'h0;
    end
    
    always@(posedge clk)
    begin
        if(reset)
        begin
            next<={EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY};
            state<=RESTART;
            fallingblock<=EMPTY;
            posx<=4'd5;
            posy<=5'd20;
            angle<=2'd0;
            falling_counter<=27'd0;
            keyboard_state_delay<=NO_ACTION;
            keyboard_state_delay2<=NO_ACTION;
            hold_block_counter<=0;
            hold<=EMPTY;
            falling_time<=FALLING_TIME;
            for(i=0;i<16;i=i+1)
            begin
                for(ii=0;ii<32;ii=ii+1)
                begin
                    if(i<10&&ii<23)
                    stacking_array[i][ii]<=EMPTY;
                    else
                    stacking_array[i][ii]<=GARBAGE;
                end
            end
            ctbr<=1'b0;
            calr<=1'b0;
            ep1<=5'd0;
            ep2<=5'd0;
        end
        else
        begin
            next<=next_next;
            state<=next_state;
            fallingblock<=next_fallingblock;
            posx<=next_posx;
            posy<=next_posy;
            angle<=next_angle;
            falling_counter<=next_falling_counter;
            keyboard_state_delay<=next_keyboard_state_delay;
            keyboard_state_delay2<=next_keyboard_state_delay2;
            hold_block_counter<=next_hold_block_counter;
            hold<=next_hold;
            falling_time<=next_falling_time;
            ctbr<=next_ctbr;
            calr<=next_calr;
            ep1<=next_ep1;
            ep2<=next_ep2;
        end
    end
    always@(*)
    begin
        end_signal=0;
        continue=0;
        next_next=next;
        next_state=state;
        next_fallingblock=fallingblock;
        next_posx=posx;
        next_posy=posy;
        next_angle=angle;
        next_falling_counter=falling_counter;
        if(keyboard_state==NO_ACTION)
            next_keyboard_state_delay=keyboard_state_delay;
        else
            next_keyboard_state_delay=keyboard_state;
        next_keyboard_state_delay2=keyboard_state_delay2;
        next_hold_block_counter=hold_block_counter;
        next_hold=hold;
        next_falling_time=falling_time;
//        posxmove=posx;
//        posymove=posy;
        drawing=0;
        next_ctbr=0;
        next_calr=0;
        next_ep1=ep1;
        next_ep2=ep2;
        case(state)
            RESTART:
            begin
                if(next[4*6-1:4*5]==4'b1000)
                begin
                    continue=1;
                    if(rand_act==1)
                    begin
                        next_next={next[4*5-1:4*0],1'b0,rand_out};
                    end
                end
                else
                begin
                    next_state=GET_NEXT_BLOCK;
                    next_posx=4'd5;
                    next_posy=5'd20;
                    next_angle=2'd0;
                    next_hold_block_counter=0;
                    next_hold=EMPTY;
                end
            end
            GET_NEXT_BLOCK:
            begin
                continue=1;
                if(rand_act==1)
                begin
                    next_fallingblock=next[4*6-1:4*5];
                    next_next={next[4*5-1:4*0],1'b0,rand_out};
                    next_state=FALLING;
                    next_falling_counter=FALLING_TIME;
                    next_falling_time=FALLING_TIME;
                end
            end
            FALLING_CTBR:
            begin
                next_state=FALLING;
                case(fallingblock)
                    I:
                    begin
                        case(angle)
                            2'd0:
                            if(stacking_array[posx-2][posy-1]==EMPTY&&stacking_array[posx-1][posy-1]==EMPTY&&stacking_array[posx][posy-1]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY)
                                next_ctbr=1;
                            2'd1:
                            if(stacking_array[posx][posy-2]==EMPTY)
                                next_ctbr=1;
                            2'd2:
                            if(stacking_array[posx-1][posy-1]==EMPTY&&stacking_array[posx][posy-1]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY&&stacking_array[posx+2][posy-1]==EMPTY)
                                next_ctbr=1;
                            2'd3:
                            if(stacking_array[posx][posy-3]==EMPTY)
                                next_ctbr=1;
                        endcase
                    end
                    J:
                    begin
                        case(angle)
                            2'd0:
                            if(stacking_array[posx-1][posy-1]==EMPTY&&stacking_array[posx][posy-1]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY)
                                next_ctbr=1;
                            2'd1:
                            if(stacking_array[posx+1][posy]==EMPTY&&stacking_array[posx][posy-2]==EMPTY)
                                next_ctbr=1;
                            2'd2:
                            if(stacking_array[posx-1][posy-1]==EMPTY&&stacking_array[posx][posy-1]==EMPTY&&stacking_array[posx+1][posy-2]==EMPTY)
                                next_ctbr=1;
                            2'd3:
                            if(stacking_array[posx-1][posy-2]==EMPTY&&stacking_array[posx][posy-2]==EMPTY)
                                next_ctbr=1;
                        endcase
                    end
                    L:
                    begin
                        case(angle)
                            2'd0:
                            if(stacking_array[posx-1][posy-1]==EMPTY&&stacking_array[posx][posy-1]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY)
                                next_ctbr=1;
                            2'd1:
                            if(stacking_array[posx+1][posy-2]==EMPTY&&stacking_array[posx][posy-2]==EMPTY)
                                next_ctbr=1;
                            2'd2:
                            if(stacking_array[posx-1][posy-2]==EMPTY&&stacking_array[posx][posy-1]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY)
                                next_ctbr=1;
                            2'd3:
                            if(stacking_array[posx-1][posy]==EMPTY&&stacking_array[posx][posy-2]==EMPTY)
                                next_ctbr=1;
                        endcase
                    end
                    O:
                    begin
                        case(angle)
                            2'd0:
                            if(stacking_array[posx-1][posy-1]==EMPTY&&stacking_array[posx][posy-1]==EMPTY)
                                next_ctbr=1;
                            2'd1:
                            if(stacking_array[posx][posy-1]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY)
                                next_ctbr=1;
                            2'd2:
                            if(stacking_array[posx][posy-2]==EMPTY&&stacking_array[posx+1][posy-2]==EMPTY)
                                next_ctbr=1;
                            2'd3:
                            if(stacking_array[posx-1][posy-2]==EMPTY&&stacking_array[posx][posy-2]==EMPTY)
                                next_ctbr=1;
                        endcase
                    end
                    S:
                    begin
                        case(angle)
                            2'd0:
                            if(stacking_array[posx-1][posy-1]==EMPTY&&stacking_array[posx][posy-1]==EMPTY&&stacking_array[posx+1][posy]==EMPTY)
                                next_ctbr=1;
                            2'd1:
                            if(stacking_array[posx][posy-1]==EMPTY&&stacking_array[posx+1][posy-2]==EMPTY)
                                next_ctbr=1;
                            2'd2:
                            if(stacking_array[posx-1][posy-2]==EMPTY&&stacking_array[posx][posy-2]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY)
                                next_ctbr=1;
                            2'd3:
                            if(stacking_array[posx-1][posy-1]==EMPTY&&stacking_array[posx][posy-2]==EMPTY)
                                next_ctbr=1;
                        endcase
                    end
                    T:
                    begin
                        case(angle)
                            2'd0:
                            if(stacking_array[posx-1][posy-1]==EMPTY&&stacking_array[posx][posy-1]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY)
                                next_ctbr=1;
                            2'd1:
                            if(stacking_array[posx][posy-2]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY)
                                next_ctbr=1;
                            2'd2:
                            if(stacking_array[posx-1][posy-1]==EMPTY&&stacking_array[posx][posy-2]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY)
                                next_ctbr=1;
                            2'd3:
                            if(stacking_array[posx-1][posy-1]==EMPTY&&stacking_array[posx][posy-2]==EMPTY)
                                next_ctbr=1;
                        endcase
                    end
                    Z:
                    begin
                        case(angle)
                            2'd0:
                            if(stacking_array[posx-1][posy-1+1]==EMPTY&&stacking_array[posx][posy-1]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY)
                                next_ctbr=1;
                            2'd1:
                            if(stacking_array[posx][posy-2]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY)
                                next_ctbr=1;
                            2'd2:
                            if(stacking_array[posx-1][posy-1]==EMPTY&&stacking_array[posx][posy-2]==EMPTY&&stacking_array[posx+1][posy-2]==EMPTY)
                                next_ctbr=1;
                            2'd3:
                            if(stacking_array[posx-1][posy-2]==EMPTY&&stacking_array[posx][posy-1]==EMPTY)
                                next_ctbr=1;
                        endcase
                    end
                endcase
            end
            FALLING_CALR:
            begin
                next_state=FALLING;
                next_keyboard_state_delay2=keyboard_state_delay;
                case(next_fallingblock)
                    I:
                    begin
                        case(keyboard_state_delay)
                            MOVE_LEFT:
                            begin
                                case(angle)
                                    2'd0:
                                    if(stacking_array[posx-3][posy]==EMPTY)
                                        next_calr=1;
                                    2'd1:
                                    if(stacking_array[posx-1][posy-1]==EMPTY&&stacking_array[posx-1][posy]==EMPTY&&stacking_array[posx-1][posy+1]==EMPTY&&stacking_array[posx-1][posy+2]==EMPTY)
                                        next_calr=1;
                                    2'd2:
                                    if(stacking_array[posx-2][posy]==EMPTY)
                                        next_calr=1;
                                    2'd3:
                                    if(stacking_array[posx-1][posy+1]==EMPTY&&stacking_array[posx-1][posy]==EMPTY&&stacking_array[posx-1][posy-1]==EMPTY&&stacking_array[posx-1][posy-2]==EMPTY)
                                        next_calr=1;
                                endcase
                            end
                            MOVE_RIGHT:
                            begin
                                case(angle)
                                    2'd0:
                                    if(stacking_array[posx+2][posy]==EMPTY)
                                        next_calr=1;
                                    2'd1:
                                    if(stacking_array[posx+1][posy-1]==EMPTY&&stacking_array[posx+1][posy]==EMPTY&&stacking_array[posx+1][posy+1]==EMPTY&&stacking_array[posx+1][posy+2]==EMPTY)
                                        next_calr=1;
                                    2'd2:
                                    if(stacking_array[posx+3][posy]==EMPTY)
                                        next_calr=1;
                                    2'd3:
                                    if(stacking_array[posx+1][posy+1]==EMPTY&&stacking_array[posx+1][posy]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY&&stacking_array[posx+1][posy-2]==EMPTY)
                                        next_calr=1;
                                endcase
                            end
                            CLOCKWISE:
                            begin
                                case(angle)
                                    2'd0:
                                    if(stacking_array[posx][posy-1]==EMPTY&&stacking_array[posx][posy+1]==EMPTY&&stacking_array[posx][posy+2]==EMPTY)
                                        next_calr=1;
                                    2'd1:
                                    if(stacking_array[posx-1][posy]==EMPTY&&stacking_array[posx+1][posy]==EMPTY&&stacking_array[posx+2][posy]==EMPTY)
                                        next_calr=1;
                                    2'd2:
                                    if(stacking_array[posx][posy+1]==EMPTY&&stacking_array[posx][posy-1]==EMPTY&&stacking_array[posx][posy-2]==EMPTY)
                                        next_calr=1;
                                    2'd3:
                                    if(stacking_array[posx-2][posy]==EMPTY&&stacking_array[posx-1][posy]==EMPTY&&stacking_array[posx+1][posy]==EMPTY)
                                        next_calr=1;
                                endcase
                            end
                            COUNTERCLOCKWISE:
                            begin
                                case(angle)
                                    2'd2:
                                    if(stacking_array[posx][posy-1]==EMPTY&&stacking_array[posx][posy+1]==EMPTY&&stacking_array[posx][posy+2]==EMPTY)
                                        next_calr=1;
                                    2'd3:
                                    if(stacking_array[posx-1][posy]==EMPTY&&stacking_array[posx+1][posy]==EMPTY&&stacking_array[posx+2][posy]==EMPTY)
                                        next_calr=1;
                                    2'd0:
                                    if(stacking_array[posx][posy+1]==EMPTY&&stacking_array[posx][posy-1]==EMPTY&&stacking_array[posx][posy-2]==EMPTY)
                                        next_calr=1;
                                    2'd1:
                                    if(stacking_array[posx-2][posy]==EMPTY&&stacking_array[posx-1][posy]==EMPTY&&stacking_array[posx+1][posy]==EMPTY)
                                        next_calr=1;
                                endcase
                            end
                        endcase
                    end
                    J:
                    begin
                        case(keyboard_state_delay)
                            MOVE_LEFT:
                            begin
                                case(angle)
                                2'd0:
                                if(stacking_array[posx-2][posy]==EMPTY&&stacking_array[posx-2][posy+1]==EMPTY)
                                    next_calr=1;
                                2'd1:
                                if(stacking_array[posx-1][posy+1]==EMPTY&&stacking_array[posx-1][posy]==EMPTY&&stacking_array[posx-1][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd2:
                                if(stacking_array[posx-2][posy]==EMPTY&&stacking_array[posx][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd3:
                                if(stacking_array[posx-2][posy-1]==EMPTY&&stacking_array[posx-1][posy]==EMPTY&&stacking_array[posx-1][posy+1]==EMPTY)
                                    next_calr=1;
                                endcase
                            end
                            MOVE_RIGHT:
                            begin
                                case(angle)
                                2'd0:
                                if(stacking_array[posx+2][posy]==EMPTY&&stacking_array[posx][posy+1]==EMPTY)
                                    next_calr=1;
                                2'd1:
                                if(stacking_array[posx+2][posy+1]==EMPTY&&stacking_array[posx+1][posy]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd2:
                                if(stacking_array[posx+2][posy]==EMPTY&&stacking_array[posx+2][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd3:
                                if(stacking_array[posx+1][posy-1]==EMPTY&&stacking_array[posx+1][posy]==EMPTY&&stacking_array[posx+1][posy+1]==EMPTY)
                                    next_calr=1;
                                endcase
                            end
                            CLOCKWISE:
                            begin
                                case(angle)
                                    2'd0:
                                    if(stacking_array[posx+1][posy+1]==EMPTY&&stacking_array[posx][posy+1]==EMPTY&&stacking_array[posx][posy-1]==EMPTY)
                                        next_calr=1;
                                    2'd1:
                                    if(stacking_array[posx-1][posy]==EMPTY&&stacking_array[posx+1][posy]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY)
                                        next_calr=1;
                                    2'd2:
                                    if(stacking_array[posx][posy+1]==EMPTY&&stacking_array[posx][posy-1]==EMPTY&&stacking_array[posx-1][posy-1]==EMPTY)
                                        next_calr=1;
                                    2'd3:
                                    if(stacking_array[posx-1][posy+1]==EMPTY&&stacking_array[posx-1][posy]==EMPTY&&stacking_array[posx+1][posy]==EMPTY)
                                        next_calr=1;
                                endcase
                            end
                            COUNTERCLOCKWISE:
                            begin
                                case(angle)
                                    2'd2:
                                    if(stacking_array[posx+1][posy+1]==EMPTY&&stacking_array[posx][posy+1]==EMPTY&&stacking_array[posx][posy-1]==EMPTY)
                                        next_calr=1;
                                    2'd3:
                                    if(stacking_array[posx-1][posy]==EMPTY&&stacking_array[posx+1][posy]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY)
                                        next_calr=1;
                                    2'd0:
                                    if(stacking_array[posx][posy+1]==EMPTY&&stacking_array[posx][posy-1]==EMPTY&&stacking_array[posx-1][posy-1]==EMPTY)
                                        next_calr=1;
                                    2'd1:
                                    if(stacking_array[posx-1][posy+1]==EMPTY&&stacking_array[posx-1][posy]==EMPTY&&stacking_array[posx+1][posy]==EMPTY)
                                        next_calr=1;
                                endcase
                            end
                        endcase
                    end
                    L:
                    begin
                        case(keyboard_state_delay)
                            MOVE_LEFT:
                            begin
                                case(angle)
                                2'd0:
                                if(stacking_array[posx-2][posy]==EMPTY&&stacking_array[posx][posy+1]==EMPTY)
                                    next_calr=1;
                                2'd1:
                                if(stacking_array[posx-1][posy+1]==EMPTY&&stacking_array[posx-1][posy]==EMPTY&&stacking_array[posx-1][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd2:
                                if(stacking_array[posx-2][posy]==EMPTY&&stacking_array[posx-2][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd3:
                                if(stacking_array[posx-2][posy+1]==EMPTY&&stacking_array[posx-1][posy]==EMPTY&&stacking_array[posx-1][posy-1]==EMPTY)
                                    next_calr=1;
                                endcase
                            end
                            MOVE_RIGHT:
                            begin
                                case(angle)
                                2'd0:
                                if(stacking_array[posx+2][posy]==EMPTY&&stacking_array[posx+2][posy+1]==EMPTY)
                                    next_calr=1;
                                2'd1:
                                if(stacking_array[posx+2][posy-1]==EMPTY&&stacking_array[posx+1][posy]==EMPTY&&stacking_array[posx+1][posy+1]==EMPTY)
                                    next_calr=1;
                                2'd2:
                                if(stacking_array[posx+2][posy]==EMPTY&&stacking_array[posx][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd3:
                                if(stacking_array[posx+1][posy-1]==EMPTY&&stacking_array[posx+1][posy]==EMPTY&&stacking_array[posx+1][posy+1]==EMPTY)
                                    next_calr=1;
                                endcase
                            end
                            CLOCKWISE:
                            begin
                                case(angle)
                                    2'd0:
                                    if(stacking_array[posx][posy+1]==EMPTY&&stacking_array[posx][posy-1]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY)
                                        next_calr=1;
                                    2'd1:
                                    if(stacking_array[posx-1][posy-1]==EMPTY&&stacking_array[posx-1][posy]==EMPTY&&stacking_array[posx+1][posy]==EMPTY)
                                        next_calr=1;
                                    2'd2:
                                    if(stacking_array[posx-1][posy+1]==EMPTY&&stacking_array[posx][posy+1]==EMPTY&&stacking_array[posx][posy-1]==EMPTY)
                                        next_calr=1;
                                    2'd3:
                                    if(stacking_array[posx-1][posy]==EMPTY&&stacking_array[posx+1][posy]==EMPTY&&stacking_array[posx+1][posy+1]==EMPTY)
                                        next_calr=1;
                                endcase
                            end
                            COUNTERCLOCKWISE:
                            begin
                                case(angle)
                                    2'd2:
                                    if(stacking_array[posx][posy+1]==EMPTY&&stacking_array[posx][posy-1]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY)
                                        next_calr=1;
                                    2'd3:
                                    if(stacking_array[posx-1][posy-1]==EMPTY&&stacking_array[posx-1][posy]==EMPTY&&stacking_array[posx+1][posy]==EMPTY)
                                        next_calr=1;
                                    2'd0:
                                    if(stacking_array[posx-1][posy+1]==EMPTY&&stacking_array[posx][posy+1]==EMPTY&&stacking_array[posx][posy-1]==EMPTY)
                                        next_calr=1;
                                    2'd1:
                                    if(stacking_array[posx-1][posy]==EMPTY&&stacking_array[posx+1][posy]==EMPTY&&stacking_array[posx+1][posy+1]==EMPTY)
                                        next_calr=1;
                                endcase
                            end
                        endcase
                    end
                    O:
                    begin
                        case(keyboard_state_delay)
                            MOVE_LEFT:
                            begin
                                case(angle)
                                2'd0:
                                if(stacking_array[posx-2][posy]==EMPTY&&stacking_array[posx-2][posy+1]==EMPTY)
                                    next_calr=1;
                                2'd1:
                                if(stacking_array[posx-1][posy]==EMPTY&&stacking_array[posx-1][posy+1]==EMPTY)
                                    next_calr=1;
                                2'd2:
                                if(stacking_array[posx-1][posy]==EMPTY&&stacking_array[posx-1][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd3:
                                if(stacking_array[posx-2][posy]==EMPTY&&stacking_array[posx-2][posy-1]==EMPTY)
                                    next_calr=1;
                                endcase
                            end
                            MOVE_RIGHT:
                            begin
                                case(angle)
                                2'd0:
                                if(stacking_array[posx+1][posy]==EMPTY&&stacking_array[posx+1][posy+1]==EMPTY)
                                    next_calr=1;
                                2'd1:
                                if(stacking_array[posx+2][posy]==EMPTY&&stacking_array[posx+2][posy+1]==EMPTY)
                                    next_calr=1;
                                2'd2:
                                if(stacking_array[posx+2][posy]==EMPTY&&stacking_array[posx+2][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd3:
                                if(stacking_array[posx+1][posy]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY)
                                    next_calr=1;
                                endcase
                            end
                            CLOCKWISE:
                            begin
                                case(angle)
                                2'd0:
                                if(stacking_array[posx+1][posy]==EMPTY&&stacking_array[posx+1][posy+1]==EMPTY)
                                    next_calr=1;
                                2'd1:
                                if(stacking_array[posx][posy-1]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd2:
                                if(stacking_array[posx-1][posy]==EMPTY&&stacking_array[posx-1][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd3:
                                if(stacking_array[posx+1][posy+1]==EMPTY&&stacking_array[posx][posy+1]==EMPTY)
                                    next_calr=1;
                                endcase
                            end
                            COUNTERCLOCKWISE:
                            begin
                                case(angle)
                                2'd0:
                                if(stacking_array[posx-1][posy-1]==EMPTY&&stacking_array[posx][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd1:
                                if(stacking_array[posx-1][posy+1]==EMPTY&&stacking_array[posx-1][posy]==EMPTY)
                                    next_calr=1;
                                2'd2:
                                if(stacking_array[posx][posy+1]==EMPTY&&stacking_array[posx+1][posy+1]==EMPTY)
                                    next_calr=1;
                                2'd3:
                                if(stacking_array[posx+1][posy]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY)
                                    next_calr=1;
                                endcase
                            end
                        endcase
                    end
                    S:
                    begin
                        case(keyboard_state_delay)
                            MOVE_LEFT:
                            begin
                                case(angle)
                                2'd0:
                                if(stacking_array[posx-2][posy]==EMPTY&&stacking_array[posx-1][posy+1]==EMPTY)
                                    next_calr=1;
                                2'd1:
                                if(stacking_array[posx-1][posy]==EMPTY&&stacking_array[posx-1][posy+1]==EMPTY&&stacking_array[posx][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd2:
                                if(stacking_array[posx-2][posy-1]==EMPTY&&stacking_array[posx-1][posy]==EMPTY)
                                    next_calr=1;
                                2'd3:
                                if(stacking_array[posx-2][posy]==EMPTY&&stacking_array[posx-2][posy+1]==EMPTY&&stacking_array[posx-1][posy-1]==EMPTY)
                                    next_calr=1;
                                endcase
                            end
                            MOVE_RIGHT:
                            begin
                                case(angle)
                                2'd0:
                                if(stacking_array[posx+1][posy]==EMPTY&&stacking_array[posx+2][posy+1]==EMPTY)
                                    next_calr=1;
                                2'd1:
                                if(stacking_array[posx+2][posy]==EMPTY&&stacking_array[posx+1][posy+1]==EMPTY&&stacking_array[posx+2][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd2:
                                if(stacking_array[posx+2][posy]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd3:
                                if(stacking_array[posx+1][posy]==EMPTY&&stacking_array[posx][posy+1]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY)
                                    next_calr=1;
                                endcase
                            end
                            CLOCKWISE:
                            begin
                                case(angle)
                                2'd0:
                                if(stacking_array[posx+1][posy]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd1:
                                if(stacking_array[posx-1][posy-1]==EMPTY&&stacking_array[posx][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd2:
                                if(stacking_array[posx-1][posy]==EMPTY&&stacking_array[posx-1][posy+1]==EMPTY)
                                    next_calr=1;
                                2'd3:
                                if(stacking_array[posx][posy+1]==EMPTY&&stacking_array[posx+1][posy+1]==EMPTY)
                                    next_calr=1;
                                endcase
                            end
                            COUNTERCLOCKWISE:
                            begin
                                case(angle)
                                2'd0:
                                if(stacking_array[posx-1][posy+1]==EMPTY&&stacking_array[posx][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd1:
                                if(stacking_array[posx+1][posy+1]==EMPTY&&stacking_array[posx-1][posy]==EMPTY)
                                    next_calr=1;
                                2'd2:
                                if(stacking_array[posx][posy+1]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd3:
                                if(stacking_array[posx+1][posy]==EMPTY&&stacking_array[posx-1][posy-1]==EMPTY)
                                    next_calr=1;
                                endcase
                            end
                        endcase
                    end
                    T:
                    begin
                        case(keyboard_state_delay)
                            MOVE_LEFT:
                            begin
                                case(angle)
                                2'd0:
                                if(stacking_array[posx-2][posy]==EMPTY&&stacking_array[posx-1][posy+1]==EMPTY)
                                    next_calr=1;
                                2'd1:
                                if(stacking_array[posx-1][posy+1]==EMPTY&&stacking_array[posx-1][posy]==EMPTY&&stacking_array[posx-1][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd2:
                                if(stacking_array[posx-2][posy]==EMPTY&&stacking_array[posx-1][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd3:
                                if(stacking_array[posx-1][posy+1]==EMPTY&&stacking_array[posx-2][posy]==EMPTY&&stacking_array[posx-1][posy-1]==EMPTY)
                                    next_calr=1;
                                endcase
                            end
                            MOVE_RIGHT:
                            begin
                                case(angle)
                                2'd0:
                                if(stacking_array[posx+2][posy]==EMPTY&&stacking_array[posx+1][posy+1]==EMPTY)
                                    next_calr=1;
                                2'd1:
                                if(stacking_array[posx+1][posy+1]==EMPTY&&stacking_array[posx+2][posy]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd2:
                                if(stacking_array[posx+2][posy]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd3:
                                if(stacking_array[posx+1][posy+1]==EMPTY&&stacking_array[posx+1][posy]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY)
                                    next_calr=1;
                                endcase
                            end
                            CLOCKWISE:
                            begin
                                case(angle)
                                2'd0:
                                if(stacking_array[posx][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd1:
                                if(stacking_array[posx-1][posy]==EMPTY)
                                    next_calr=1;
                                2'd2:
                                if(stacking_array[posx][posy+1]==EMPTY)
                                    next_calr=1;
                                2'd3:
                                if(stacking_array[posx+1][posy]==EMPTY)
                                    next_calr=1;
                                endcase
                            end
                            COUNTERCLOCKWISE:
                            begin
                                case(angle)
                                2'd0:
                                if(stacking_array[posx][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd1:
                                if(stacking_array[posx-1][posy]==EMPTY)
                                    next_calr=1;
                                2'd2:
                                if(stacking_array[posx][posy+1]==EMPTY)
                                    next_calr=1;
                                2'd3:
                                if(stacking_array[posx+1][posy]==EMPTY)
                                    next_calr=1;
                                endcase
                            end
                        endcase
                    end
                    Z:
                    begin
                        case(keyboard_state_delay)
                            MOVE_LEFT:
                            begin
                                case(angle)
                                2'd0:
                                if(stacking_array[posx-2][posy+1]==EMPTY&&stacking_array[posx-1][posy]==EMPTY)
                                    next_calr=1;
                                2'd1:
                                if(stacking_array[posx][posy+1]==EMPTY&&stacking_array[posx-1][posy]==EMPTY&&stacking_array[posx-1][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd2:
                                if(stacking_array[posx-2][posy]==EMPTY&&stacking_array[posx-1][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd3:
                                if(stacking_array[posx-1][posy+1]==EMPTY&&stacking_array[posx-2][posy]==EMPTY&&stacking_array[posx-2][posy-1]==EMPTY)
                                    next_calr=1;
                                endcase
                            end
                            MOVE_RIGHT:
                            begin
                                case(angle)
                                2'd0:
                                if(stacking_array[posx+1][posy+1]==EMPTY&&stacking_array[posx+2][posy]==EMPTY)
                                    next_calr=1;
                                2'd1:
                                if(stacking_array[posx+2][posy+1]==EMPTY&&stacking_array[posx+2][posy]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd2:
                                if(stacking_array[posx+1][posy]==EMPTY&&stacking_array[posx+2][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd3:
                                if(stacking_array[posx+1][posy+1]==EMPTY&&stacking_array[posx+1][posy]==EMPTY&&stacking_array[posx][posy-1]==EMPTY)
                                    next_calr=1;
                                endcase
                            end
                            CLOCKWISE:
                            begin
                                case(angle)
                                2'd0:
                                if(stacking_array[posx+1][posy+1]==EMPTY&&stacking_array[posx][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd1:
                                if(stacking_array[posx-1][posy]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd2:
                                if(stacking_array[posx][posy+1]==EMPTY&&stacking_array[posx-1][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd3:
                                if(stacking_array[posx-1][posy+1]==EMPTY&&stacking_array[posx+1][posy]==EMPTY)
                                    next_calr=1;
                                endcase
                            end
                            COUNTERCLOCKWISE:
                            begin
                                case(angle)
                                2'd0:
                                if(stacking_array[posx-1][posy]==EMPTY&&stacking_array[posx-1][posy-1]==EMPTY)
                                    next_calr=1;
                                2'd1:
                                if(stacking_array[posx][posy+1]==EMPTY&&stacking_array[posx-1][posy+1]==EMPTY)
                                    next_calr=1;
                                2'd2:
                                if(stacking_array[posx+1][posy]==EMPTY&&stacking_array[posx+1][posy+1]==EMPTY)
                                    next_calr=1;
                                2'd3:
                                if(stacking_array[posx][posy-1]==EMPTY&&stacking_array[posx+1][posy-1]==EMPTY)
                                    next_calr=1;
                                endcase
                            end
                        endcase
                    end
                endcase
            end
            FALLING:
            begin
                if(falling_counter==ACTION_TIME_C1||falling_counter==ACTION_TIME_C2||falling_counter==ACTION_TIME_C3)
                    next_state=FALLING_CALR;
                else if(falling_counter==falling_time)
                    next_state=FALLING_CTBR;
                next_falling_counter=falling_counter+1;
                if(falling_counter==ACTION_TIME_D1||falling_counter==ACTION_TIME_D2||falling_counter==ACTION_TIME_D3)
                begin
                    case(keyboard_state_delay2)
                        SLOW_DOWN:
                        begin
                            next_keyboard_state_delay=NO_ACTION;
                            next_falling_counter=FALLING_TIME;
                        end
                        MOMENTARY_DROP:
                        begin
                            next_keyboard_state_delay=NO_ACTION;
                            next_falling_time=27'd0;
                            next_falling_counter=27'd0;
                        end
                        HOLD_BLOCK:
                        begin
                            if(hold_block_counter==0)
                            begin
                                next_hold_block_counter=1;
                                next_fallingblock=EMPTY;
                                if(hold==EMPTY)
                                begin
                                    next_hold=fallingblock;
                                    next_state=GET_NEXT_BLOCK;
                                    next_posx=4'd5;
                                    next_posy=5'd20;
                                    next_angle=2'd0;
                                end
                                else
                                begin
                                    next_hold=fallingblock;
                                    next_fallingblock=hold;
                                    next_posx=4'd5;
                                    next_posy=5'd20;
                                    next_angle=2'd0;
                                    next_state=FALLING;
                                    next_falling_counter=FALLING_TIME;
                                    next_falling_time=FALLING_TIME;
                                end
                                drawing=1;
                            end
                        end
                    endcase
                    if(calr)
                    begin
                        case(keyboard_state_delay2)
                            MOVE_LEFT:
                            begin
                                next_keyboard_state_delay=NO_ACTION;
                                next_posx=posx-1;
                                drawing=1;
                            end
                            MOVE_RIGHT:
                            begin
                                next_keyboard_state_delay=NO_ACTION;
                                next_posx=posx+1;
                                drawing=1;
                            end
                            CLOCKWISE:
                            begin
                                next_keyboard_state_delay=NO_ACTION;
                                next_angle=angle+1;
                                drawing=1;
                            end
                            COUNTERCLOCKWISE:
                            begin
                                next_keyboard_state_delay=NO_ACTION;
                                next_angle=angle-1;
                                drawing=1;
                            end
                        endcase    
                    end
                end
                if(falling_counter>falling_time)
                begin
                    if(ctbr)
                    begin
                        next_posy=posy-1;
                        drawing=1;
                        next_falling_counter=0;
                    end
                    else if(posy==5'd20)
                    begin
                        next_state=END;
                    end
                    else
                    begin
                        next_hold_block_counter=0;
                        next_state=ELIMINATE;
                        next_ep1=0;
                        next_ep2=0;
//                        next_state=GET_NEXT_BLOCK;
                        next_posx=4'd5;
                        next_posy=5'd20;
                        next_angle=2'd0;
                    end
                end
            end
            ELIMINATE:
            begin
                if(((stacking_array[4'd0][ep1]!=EMPTY&&stacking_array[4'd1][ep1]!=EMPTY)&&(stacking_array[4'd2][ep1]!=EMPTY&&
                stacking_array[4'd3][ep1]!=EMPTY))&&((stacking_array[4'd4][ep1]!=EMPTY&&stacking_array[4'd5][ep1]!=EMPTY)&&(
                stacking_array[4'd6][ep1]!=EMPTY&&stacking_array[4'd7][ep1]!=EMPTY))&&(stacking_array[4'd8][ep1]!=EMPTY&&stacking_array[4'd9][ep1]!=EMPTY))
                begin
                    next_ep1=ep1;
                    next_ep2=ep2+1;
                end
                else
                begin
                    next_ep1=ep1+1;
                    next_ep2=ep2+1;
                end
                for(iep=0;iep<10;iep=iep+1)
                stacking_array[iep][ep1]=stacking_array[iep][ep2];
                if(ep2==5'd20)
                begin
                     next_state=GET_NEXT_BLOCK;
                     next_posx=4'd5;
                    next_posy=5'd20;
                    next_angle=2'd0;
                end
            end
            END:
            begin
                end_signal=1;
            end
            
        endcase

        if(drawing)
        begin
        case(fallingblock)
            I:
            begin
                case(angle)
                    2'd0:
                    begin
                    stacking_array[posx-2][posy]=EMPTY;
                    stacking_array[posx-1][posy]=EMPTY;
                    stacking_array[posx][posy]=EMPTY;
                    stacking_array[posx+1][posy]=EMPTY;
                    end
                    2'd1:
                    begin
                    stacking_array[posx][posy+2]=EMPTY;
                    stacking_array[posx][posy+1]=EMPTY;
                    stacking_array[posx][posy]=EMPTY;
                    stacking_array[posx][posy-1]=EMPTY;
                    end
                    2'd2:
                    begin
                    stacking_array[posx-1][posy]=EMPTY;
                    stacking_array[posx][posy]=EMPTY;
                    stacking_array[posx+1][posy]=EMPTY;
                    stacking_array[posx+2][posy]=EMPTY;
                    end
                    2'd3:
                    begin
                    stacking_array[posx][posy+1]=EMPTY;
                    stacking_array[posx][posy]=EMPTY;
                    stacking_array[posx][posy-1]=EMPTY;
                    stacking_array[posx][posy-2]=EMPTY;
                    end
                endcase
            end
            J:
            begin
                case(angle)
                2'd0:
                begin
                    stacking_array[posx-1][posy+1]=EMPTY;
                    stacking_array[posx-1][posy]=EMPTY;
                    stacking_array[posx][posy]=EMPTY;
                    stacking_array[posx+1][posy]=EMPTY;
                end
                2'd1:
                begin
                    stacking_array[posx+1][posy+1]=EMPTY;
                    stacking_array[posx][posy+1]=EMPTY;
                    stacking_array[posx][posy]=EMPTY;
                    stacking_array[posx][posy-1]=EMPTY;
                end
                2'd2:
                begin
                    stacking_array[posx+1][posy-1]=EMPTY;
                    stacking_array[posx+1][posy]=EMPTY;
                    stacking_array[posx][posy]=EMPTY;
                    stacking_array[posx-1][posy]=EMPTY;
                end
                2'd3:
                begin
                    stacking_array[posx-1][posy-1]=EMPTY;
                    stacking_array[posx][posy-1]=EMPTY;
                    stacking_array[posx][posy]=EMPTY;
                    stacking_array[posx][posy+1]=EMPTY;
                end
                endcase
            end
            L:
            begin
                case(angle)
                2'd0:
                begin
                    stacking_array[posx-1][posy]=EMPTY;
                    stacking_array[posx][posy]=EMPTY;
                    stacking_array[posx+1][posy]=EMPTY;
                    stacking_array[posx+1][posy+1]=EMPTY;
                end
                2'd1:
                begin
                    stacking_array[posx][posy+1]=EMPTY;
                    stacking_array[posx][posy]=EMPTY;
                    stacking_array[posx][posy-1]=EMPTY;
                    stacking_array[posx+1][posy-1]=EMPTY;
                end
                2'd2:
                begin
                    stacking_array[posx-1][posy-1]=EMPTY;
                    stacking_array[posx-1][posy]=EMPTY;
                    stacking_array[posx][posy]=EMPTY;
                    stacking_array[posx+1][posy]=EMPTY;
                end
                2'd3:
                begin
                    stacking_array[posx-1][posy+1]=EMPTY;
                    stacking_array[posx][posy+1]=EMPTY;
                    stacking_array[posx][posy]=EMPTY;
                    stacking_array[posx][posy-1]=EMPTY;
                end
                endcase
            end
            O:
            begin
                case(angle)
                2'd0:
                begin
                    stacking_array[posx-1][posy]=EMPTY;
                    stacking_array[posx][posy]=EMPTY;
                    stacking_array[posx-1][posy+1]=EMPTY;
                    stacking_array[posx][posy+1]=EMPTY;
                end
                2'd1:
                begin
                    stacking_array[posx+1][posy]=EMPTY;
                    stacking_array[posx][posy]=EMPTY;
                    stacking_array[posx+1][posy+1]=EMPTY;
                    stacking_array[posx][posy+1]=EMPTY;
                end
                2'd2:
                begin
                    stacking_array[posx+1][posy]=EMPTY;
                    stacking_array[posx][posy]=EMPTY;
                    stacking_array[posx+1][posy-1]=EMPTY;
                    stacking_array[posx][posy-1]=EMPTY;
                end
                2'd3:
                begin
                    stacking_array[posx-1][posy]=EMPTY;
                    stacking_array[posx][posy]=EMPTY;
                    stacking_array[posx-1][posy-1]=EMPTY;
                    stacking_array[posx][posy-1]=EMPTY;
                end
                endcase
            end
            S:
            begin
                case(angle)
                2'd0:
                begin
                    stacking_array[posx-1][posy]=EMPTY;
                    stacking_array[posx][posy]=EMPTY;
                    stacking_array[posx][posy+1]=EMPTY;
                    stacking_array[posx+1][posy+1]=EMPTY;
                end
                2'd1:
                begin
                    stacking_array[posx][posy+1]=EMPTY;
                    stacking_array[posx][posy]=EMPTY;
                    stacking_array[posx+1][posy]=EMPTY;
                    stacking_array[posx+1][posy-1]=EMPTY;
                end
                2'd2:
                begin
                    stacking_array[posx-1][posy-1]=EMPTY;
                    stacking_array[posx][posy-1]=EMPTY;
                    stacking_array[posx][posy]=EMPTY;
                    stacking_array[posx+1][posy]=EMPTY;
                end
                2'd3:
                begin
                    stacking_array[posx-1][posy+1]=EMPTY;
                    stacking_array[posx-1][posy]=EMPTY;
                    stacking_array[posx][posy]=EMPTY;
                    stacking_array[posx][posy-1]=EMPTY;
                end
                endcase
            end
            T:
            begin
                case(angle)
                2'd0:
                begin
                    stacking_array[posx-1][posy]=EMPTY;
                    stacking_array[posx][posy]=EMPTY;
                    stacking_array[posx+1][posy]=EMPTY;
                    stacking_array[posx][posy+1]=EMPTY;
                end
                2'd1:
                begin
                    stacking_array[posx][posy+1]=EMPTY;
                    stacking_array[posx][posy]=EMPTY;
                    stacking_array[posx][posy-1]=EMPTY;
                    stacking_array[posx+1][posy]=EMPTY;
                end
                2'd2:
                begin
                    stacking_array[posx-1][posy]=EMPTY;
                    stacking_array[posx][posy]=EMPTY;
                    stacking_array[posx+1][posy]=EMPTY;
                    stacking_array[posx][posy-1]=EMPTY;
                end
                2'd3:
                begin
                    stacking_array[posx][posy+1]=EMPTY;
                    stacking_array[posx][posy]=EMPTY;
                    stacking_array[posx][posy-1]=EMPTY;
                    stacking_array[posx-1][posy]=EMPTY;
                end
                endcase
            end
            Z:
            begin
                case(angle)
                2'd0:
                begin
                    stacking_array[posx-1][posy+1]=EMPTY;
                    stacking_array[posx][posy+1]=EMPTY;
                    stacking_array[posx][posy]=EMPTY;
                    stacking_array[posx+1][posy]=EMPTY;
                end
                2'd1:
                begin
                    stacking_array[posx+1][posy+1]=EMPTY;
                    stacking_array[posx+1][posy]=EMPTY;
                    stacking_array[posx][posy]=EMPTY;
                    stacking_array[posx][posy-1]=EMPTY;
                end
                2'd2:
                begin
                    stacking_array[posx-1][posy]=EMPTY;
                    stacking_array[posx][posy]=EMPTY;
                    stacking_array[posx][posy-1]=EMPTY;
                    stacking_array[posx+1][posy-1]=EMPTY;
                end
                2'd3:
                begin
                    stacking_array[posx][posy+1]=EMPTY;
                    stacking_array[posx][posy]=EMPTY;
                    stacking_array[posx-1][posy]=EMPTY;
                    stacking_array[posx-1][posy-1]=EMPTY;
                end
                endcase
            end
        endcase
        case(next_fallingblock)
            I:
            begin
                case(next_angle)
                    2'd0:
                    begin
                    stacking_array[next_posx-2][next_posy]=I;
                    stacking_array[next_posx-1][next_posy]=I;
                    stacking_array[next_posx][next_posy]=I;
                    stacking_array[next_posx+1][next_posy]=I;
                    end
                    2'd1:
                    begin
                    stacking_array[next_posx][next_posy+2]=I;
                    stacking_array[next_posx][next_posy+1]=I;
                    stacking_array[next_posx][next_posy]=I;
                    stacking_array[next_posx][next_posy-1]=I;
                    end
                    2'd2:
                    begin
                    stacking_array[next_posx-1][next_posy]=I;
                    stacking_array[next_posx][next_posy]=I;
                    stacking_array[next_posx+1][next_posy]=I;
                    stacking_array[next_posx+2][next_posy]=I;
                    end
                    2'd3:
                    begin
                    stacking_array[next_posx][next_posy+1]=I;
                    stacking_array[next_posx][next_posy]=I;
                    stacking_array[next_posx][next_posy-1]=I;
                    stacking_array[next_posx][next_posy-2]=I;
                    end
                endcase
            end
            J:
            begin
                case(next_angle)
                2'd0:
                begin
                    stacking_array[next_posx-1][next_posy+1]=J;
                    stacking_array[next_posx-1][next_posy]=J;
                    stacking_array[next_posx][next_posy]=J;
                    stacking_array[next_posx+1][next_posy]=J;
                end
                2'd1:
                begin
                    stacking_array[next_posx+1][next_posy+1]=J;
                    stacking_array[next_posx][next_posy+1]=J;
                    stacking_array[next_posx][next_posy]=J;
                    stacking_array[next_posx][next_posy-1]=J;
                end
                2'd2:
                begin
                    stacking_array[next_posx+1][next_posy-1]=J;
                    stacking_array[next_posx+1][next_posy]=J;
                    stacking_array[next_posx][next_posy]=J;
                    stacking_array[next_posx-1][next_posy]=J;
                end
                2'd3:
                begin
                    stacking_array[next_posx-1][next_posy-1]=J;
                    stacking_array[next_posx][next_posy-1]=J;
                    stacking_array[next_posx][next_posy]=J;
                    stacking_array[next_posx][next_posy+1]=J;
                end
                endcase
            end
            L:
            begin
                case(next_angle)
                2'd0:
                begin
                    stacking_array[next_posx-1][next_posy]=L;
                    stacking_array[next_posx][next_posy]=L;
                    stacking_array[next_posx+1][next_posy]=L;
                    stacking_array[next_posx+1][next_posy+1]=L;
                end
                2'd1:
                begin
                    stacking_array[next_posx][next_posy+1]=L;
                    stacking_array[next_posx][next_posy]=L;
                    stacking_array[next_posx][next_posy-1]=L;
                    stacking_array[next_posx+1][next_posy-1]=L;
                end
                2'd2:
                begin
                    stacking_array[next_posx-1][next_posy-1]=L;
                    stacking_array[next_posx-1][next_posy]=L;
                    stacking_array[next_posx][next_posy]=L;
                    stacking_array[next_posx+1][next_posy]=L;
                end
                2'd3:
                begin
                    stacking_array[next_posx-1][next_posy+1]=L;
                    stacking_array[next_posx][next_posy+1]=L;
                    stacking_array[next_posx][next_posy]=L;
                    stacking_array[next_posx][next_posy-1]=L;
                end
                endcase
            end
            O:
            begin
                case(next_angle)
                2'd0:
                begin
                    stacking_array[next_posx-1][next_posy]=O;
                    stacking_array[next_posx][next_posy]=O;
                    stacking_array[next_posx-1][next_posy+1]=O;
                    stacking_array[next_posx][next_posy+1]=O;
                end
                2'd1:
                begin
                    stacking_array[next_posx+1][next_posy]=O;
                    stacking_array[next_posx][next_posy]=O;
                    stacking_array[next_posx+1][next_posy+1]=O;
                    stacking_array[next_posx][next_posy+1]=O;
                end
                2'd2:
                begin
                    stacking_array[next_posx+1][next_posy]=O;
                    stacking_array[next_posx][next_posy]=O;
                    stacking_array[next_posx+1][next_posy-1]=O;
                    stacking_array[next_posx][next_posy-1]=O;
                end
                2'd3:
                begin
                    stacking_array[next_posx-1][next_posy]=O;
                    stacking_array[next_posx][next_posy]=O;
                    stacking_array[next_posx-1][next_posy-1]=O;
                    stacking_array[next_posx][next_posy-1]=O;
                end
                endcase
            end
            S:
            begin
                case(next_angle)
                2'd0:
                begin
                    stacking_array[next_posx-1][next_posy]=S;
                    stacking_array[next_posx][next_posy]=S;
                    stacking_array[next_posx][next_posy+1]=S;
                    stacking_array[next_posx+1][next_posy+1]=S;
                end
                2'd1:
                begin
                    stacking_array[next_posx][next_posy+1]=S;
                    stacking_array[next_posx][next_posy]=S;
                    stacking_array[next_posx+1][next_posy]=S;
                    stacking_array[next_posx+1][next_posy-1]=S;
                end
                2'd2:
                begin
                    stacking_array[next_posx-1][next_posy-1]=S;
                    stacking_array[next_posx][next_posy-1]=S;
                    stacking_array[next_posx][next_posy]=S;
                    stacking_array[next_posx+1][next_posy]=S;
                end
                2'd3:
                begin
                    stacking_array[next_posx-1][next_posy+1]=S;
                    stacking_array[next_posx-1][next_posy]=S;
                    stacking_array[next_posx][next_posy]=S;
                    stacking_array[next_posx][next_posy-1]=S;
                end
                endcase
            end
            T:
            begin
                case(next_angle)
                2'd0:
                begin
                    stacking_array[next_posx-1][next_posy]=T;
                    stacking_array[next_posx][next_posy]=T;
                    stacking_array[next_posx+1][next_posy]=T;
                    stacking_array[next_posx][next_posy+1]=T;
                end
                2'd1:
                begin
                    stacking_array[next_posx][next_posy+1]=T;
                    stacking_array[next_posx][next_posy]=T;
                    stacking_array[next_posx][next_posy-1]=T;
                    stacking_array[next_posx+1][next_posy]=T;
                end
                2'd2:
                begin
                    stacking_array[next_posx-1][next_posy]=T;
                    stacking_array[next_posx][next_posy]=T;
                    stacking_array[next_posx+1][next_posy]=T;
                    stacking_array[next_posx][next_posy-1]=T;
                end
                2'd3:
                begin
                    stacking_array[next_posx][next_posy+1]=T;
                    stacking_array[next_posx][next_posy]=T;
                    stacking_array[next_posx][next_posy-1]=T;
                    stacking_array[next_posx-1][next_posy]=T;
                end
                endcase
            end
            Z:
            begin
                case(next_angle)
                2'd0:
                begin
                    stacking_array[next_posx-1][next_posy+1]=Z;
                    stacking_array[next_posx][next_posy+1]=Z;
                    stacking_array[next_posx][next_posy]=Z;
                    stacking_array[next_posx+1][next_posy]=Z;
                end
                2'd1:
                begin
                    stacking_array[next_posx+1][next_posy+1]=Z;
                    stacking_array[next_posx+1][next_posy]=Z;
                    stacking_array[next_posx][next_posy]=Z;
                    stacking_array[next_posx][next_posy-1]=Z;
                end
                2'd2:
                begin
                    stacking_array[next_posx-1][next_posy]=Z;
                    stacking_array[next_posx][next_posy]=Z;
                    stacking_array[next_posx][next_posy-1]=Z;
                    stacking_array[next_posx+1][next_posy-1]=Z;
                end
                2'd3:
                begin
                    stacking_array[next_posx][next_posy+1]=Z;
                    stacking_array[next_posx][next_posy]=Z;
                    stacking_array[next_posx-1][next_posy]=Z;
                    stacking_array[next_posx-1][next_posy-1]=Z;
                end
                endcase
            end
        endcase
        end
    end

    
endmodule
